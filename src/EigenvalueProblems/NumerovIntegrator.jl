"""
# module NumerovIntegrator



# Examples

```jldoctest
julia>
```
"""
module NumerovIntegrator

using NumericalMethodsInQuantumMechanics.EigenvalueProblems: InitialCondition
using OffsetArrays: Origin, OffsetVector
using StaticArrays: SVector

export Numerov, integrate, eachstep

abstract type Integrator end
struct Numerov <: Integrator end

struct NumerovStep{G,S,Y,H}
    g::SVector{3,G}
    s::SVector{3,S}
    y::SVector{2,Y}
    h::H
end
NumerovStep(g, s, y, h) = NumerovStep(SVector{3}(g), SVector{3}(s), SVector{2}(y), h)

function evaluate(step::NumerovStep)
    g·µ¢‚Çã‚ÇÅ, g·µ¢, g·µ¢‚Çä‚ÇÅ = step.g
    s·µ¢‚Çã‚ÇÅ, s·µ¢, s·µ¢‚Çä‚ÇÅ = step.s
    y·µ¢‚Çã‚ÇÅ, y·µ¢ = step.y
    c·µ¢‚Çã‚ÇÅ = -(1 + step.h^2 / 12 * g·µ¢‚Çã‚ÇÅ)
    c·µ¢ = 2(1 - 5step.h^2 / 12 * g·µ¢)
    c·µ¢‚Çä‚ÇÅ = 1 + step.h^2 / 12 * g·µ¢‚Çä‚ÇÅ
    s = step.h^2 / 12 * (s·µ¢‚Çã‚ÇÅ + 10s·µ¢ + s·µ¢‚Çä‚ÇÅ)
    y·µ¢‚Çä‚ÇÅ = (c·µ¢ * y·µ¢ + c·µ¢‚Çã‚ÇÅ * y·µ¢‚Çã‚ÇÅ + s) / c·µ¢‚Çä‚ÇÅ
    return y·µ¢‚Çä‚ÇÅ
end

struct NumerovIterator{N,G,S,Y,X} <: Integrator
    g::OffsetVector{G,SVector{N,G}}
    s::OffsetVector{S,SVector{N,S}}
    y::OffsetVector{Y,SVector{2,Y}}
    x::OffsetVector{X,SVector{N,X}}
end

# See https://github.com/singularitti/Fibonacci.jl/blob/4f1292a/src/Fibonacci.jl#L44-L57
# See https://en.wikipedia.org/wiki/Numerov%27s_method#The_method
Base.iterate(iter::NumerovIterator) = iter.y[0], (iter.y, 1)  # y‚ÇÄ, ((y‚ÇÄ, y‚ÇÅ), 1)
function Base.iterate(iter::NumerovIterator, ((y·µ¢‚Çã‚ÇÅ, y·µ¢), i))
    if i > length(iter.g) - 2  # Minus 2 since we start the index from 0 & skip the first element of `y` (index=0)
        return nothing
    else
        y·µ¢‚Çä‚ÇÅ = evaluate(
            NumerovStep(
                (iter.g[i - 1], iter.g[i], iter.g[i + 1]),  # g·µ¢‚Çã‚ÇÅ, g·µ¢, g·µ¢‚Çä‚ÇÅ
                (iter.s[i - 1], iter.s[i], iter.s[i + 1]),  # s·µ¢‚Çã‚ÇÅ, s·µ¢, s·µ¢‚Çä‚ÇÅ
                (y·µ¢‚Çã‚ÇÅ, y·µ¢),
                iter.x[i + 1] - iter.x[i],
            ),
        )
        return y·µ¢, ((y·µ¢, y·µ¢‚Çä‚ÇÅ), i + 1)
    end
end

Base.eltype(::Type{<:NumerovIterator{N,Y}}) where {N,Y} = Y

Base.length(iter::NumerovIterator) = length(iter.g)

eachstep(g, s, y, h) = NumerovIterator(g, s, y, h)

"""
    integrate(ic, r, gvec, svec)

Do the Numerov's method integration, return the solution ``y(x)``, given that ``g(x)`` and ``s(x)`` already
as vectors (already applied on ``x``).

# Arguments
- `ic::InitialCondition`: the initial condition ``y(x_0) = y_0`` and ``y'(x_0) = y_0'``, could be a guess.
- `r::AbstractRange{<:Real}`: a range, the domain ``x``.
- `gvec::AbstractArray{<:Real}`: the result of function ``g`` applied on ``x`` (range `r`).
- `svec::AbstractArray{<:Real}`: the result of function ``s`` applied on ``x`` (range `r`).
"""
function integrate(ùê†, ùê¨, ic::InitialCondition, h, ::Numerov)
    œï‚ÇÄ, œï‚Ä≤‚ÇÄ = ic.y‚ÇÄ, ic.y‚Ä≤‚ÇÄ
    œï = [œï‚ÇÄ, œï‚Ä≤‚ÇÄ * h]  # œï‚ÇÄ, œï‚ÇÅ
    return collect(NumerovIterator(ùê†, ùê¨, œï, h))
end

end
