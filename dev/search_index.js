var documenterSearchIndex = {"docs":
[{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"CurrentModule = NumerovShooting","category":"page"},{"location":"man/definitions/#Numerov's-method","page":"Definitions and conventions","title":"Numerov's method","text":"","category":"section"},{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"The Numerov method is introduced by Russian astronomer Boris Vasilyevich Numerov, to solve ODE","category":"page"},{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"frac d^2 y  dx^2  + g(x) y(x) = s(x)","category":"page"},{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"with initial conditions","category":"page"},{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"y(x_0) = y_0 quad y(x_0) = y_0","category":"page"},{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"Follow the derivation from the notes, we derive the n + 1 step of y_n + 1 = y(x_n + 1) satisfies","category":"page"},{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"bigg( 1 + frac h^2  12  g_n + 1 bigg) y_n + 1 =\n2 y_n bigg( 1 - frac 5 h^2  12  g_n bigg) - bigg( 1 + frac h^2  12  g_n - 1 bigg) y_n - 1","category":"page"},{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"where g_n = g(x_n) and s_n = s(x_n), etc.","category":"page"},{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"Therefore, we could split the x-axis to N pieces, and solve the solution y(x) piece-by-piece, i.e., from y[1] and y[2] to y[3], repeatedly.","category":"page"},{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"If s(x) equiv 0 on the domain of x, the the above equation simplifies to","category":"page"},{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"y_n + 1 = 2 frac 12 - 5h^2 g_n  12 + h^2 g_n + 1  y_n - y_n - 1","category":"page"},{"location":"man/definitions/","page":"Definitions and conventions","title":"Definitions and conventions","text":"integrate","category":"page"},{"location":"man/definitions/#NumerovShooting.integrate","page":"Definitions and conventions","title":"NumerovShooting.integrate","text":"integrate(ic, r, gvec, svec)\n\nDo the Numerov's method integration, return the solution y(x), given that g(x) and s(x) already as vectors (already applied on x).\n\nArguments\n\nic::InitialCondition: the initial condition y(x_0) = y_0 and y(x_0) = y_0, could be a guess.\nr::AbstractRange{<:Real}: a range, the domain x.\ngvec::AbstractArray{<:Real}: the result of function g applied on x (range r).\nsvec::AbstractArray{<:Real}: the result of function s applied on x (range r).\n\n\n\n\n\n","category":"function"},{"location":"developers/contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Pages = [\"contributing.md\"]\nDepth = 2","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Welcome! This document explains some ways you can contribute to NumerovShooting.","category":"page"},{"location":"developers/contributing/#Code-of-conduct","page":"Contributing","title":"Code of conduct","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"This project and everyone participating in it is governed by the Contributor Covenant Code of Conduct. By participating, you are expected to uphold this code.","category":"page"},{"location":"developers/contributing/#Join-the-community-forum","page":"Contributing","title":"Join the community forum","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"First up, join the community forum.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The forum is a good place to ask questions about how to use NumerovShooting. You can also use the forum to discuss possible feature requests and bugs before raising a GitHub issue (more on this below).","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Aside from asking questions, the easiest way you can contribute to NumerovShooting is to help answer questions on the forum!","category":"page"},{"location":"developers/contributing/#Improve-the-documentation","page":"Contributing","title":"Improve the documentation","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Chances are, if you asked (or answered) a question on the community forum, then it is a sign that the documentation could be improved. Moreover, since it is your question, you are probably the best-placed person to improve it!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The docs are written in Markdown and are built using Documenter.jl. You can find the source of all the docs here.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"If your change is small (like fixing typos or one or two sentence corrections), the easiest way to do this is via GitHub's online editor. (GitHub has help on how to do this.)","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"If your change is larger or touches multiple files, you will need to make the change locally and then use Git to submit a pull request. (See Contribute code to NumerovShooting below for more on this.)","category":"page"},{"location":"developers/contributing/#File-a-bug-report","page":"Contributing","title":"File a bug report","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Another way to contribute to NumerovShooting is to file bug reports.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Make sure you read the info in the box where you write the body of the issue before posting. You can also find a copy of that info here.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf you're unsure whether you have a real bug, post on the community forum first. Someone will either help you fix the problem or let you know the most appropriate place to open a bug report.","category":"page"},{"location":"developers/contributing/#Contribute-code-to-NumerovShooting","page":"Contributing","title":"Contribute code to NumerovShooting","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Finally, you can also contribute code to NumerovShooting!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nIf you do not have experience with Git, GitHub, and Julia development, the first steps can be a little daunting. However, there are lots of tutorials available online, including:GitHub\nGit and GitHub\nGit\nJulia package development","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once you are familiar with Git and GitHub, the workflow for contributing code to NumerovShooting is similar to the following:","category":"page"},{"location":"developers/contributing/#Step-1:-decide-what-to-work-on","page":"Contributing","title":"Step 1: decide what to work on","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The first step is to find an open issue (or open a new one) for the problem you want to solve. Then, before spending too much time on it, discuss what you are planning to do in the issue to see if other contributors are fine with your proposed changes. Getting feedback early can improve code quality and avoid time spent writing code that does not get merged into NumerovShooting.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nAt this point, remember to be patient and polite; you may get a lot of comments on your issue! However, do not be afraid! Comments mean that people are willing to help you improve the code that you are contributing to NumerovShooting.","category":"page"},{"location":"developers/contributing/#Step-2:-fork-NumerovShooting","page":"Contributing","title":"Step 2: fork NumerovShooting","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Go to https://github.com/singularitti/NumerovShooting.jl and click the \"Fork\" button in the top-right corner. This will create a copy of NumerovShooting under your GitHub account.","category":"page"},{"location":"developers/contributing/#Step-3:-install-NumerovShooting-locally","page":"Contributing","title":"Step 3: install NumerovShooting locally","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Similar to Installation Guide, open the Julia REPL and run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.update()\nPkg.develop(\"NumerovShooting\")","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Then the package will be cloned to your local machine. On *nix systems, the default path is ~/.julia/dev/NumerovShooting unless you modify the JULIA_DEPOT_PATH environment variable. If you're on Windows, this will be C:\\\\Users\\\\<my_name>\\\\.julia\\\\dev\\\\NumerovShooting. In the following text, we will call it PKGROOT.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Go to PKGROOT, start a new Julia session, and run","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.instantiate()","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"to instantiate the project.","category":"page"},{"location":"developers/contributing/#Step-4:-checkout-a-new-branch","page":"Contributing","title":"Step 4: checkout a new branch","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIn the following, replace any instance of GITHUB_ACCOUNT with your GitHub username.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The next step is to check out a development branch. In a terminal (or command prompt on Windows), run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"$ cd ~/.julia/dev/NumerovShooting\n\n$ git remote add GITHUB_ACCOUNT https://github.com/GITHUB_ACCOUNT/NumerovShooting.jl.git\n\n$ git checkout main\n\n$ git pull\n\n$ git checkout -b my_new_branch","category":"page"},{"location":"developers/contributing/#Step-5:-make-changes","page":"Contributing","title":"Step 5: make changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Now make any changes to the source code inside the ~/.julia/dev/NumerovShooting directory.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Make sure you:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Follow our Style Guide and Run JuliaFormatter.\nAdd tests and documentation for any changes or new features.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nWhen you change the source code, you will need to restart Julia for the changes to take effect. If this is a pain, install Revise.jl.","category":"page"},{"location":"developers/contributing/#Step-6a:-test-your-code-changes","page":"Contributing","title":"Step 6a: test your code changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"To test that your changes work, run the NumerovShooting test-suite by opening Julia and running:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"julia> cd(joinpath(DEPOT_PATH[1], \"dev\", \"NumerovShooting\"))\n\njulia> using Pkg\n\njulia> Pkg.activate(\".\")\n  Activating new project at `~/.julia/dev/NumerovShooting`\n\njulia> Pkg.test()","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nRunning the tests might take a long time.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf you are using Revise.jl, you can also run the tests by calling include:include(\"test/runtests.jl\")This can be faster if you want to re-run the tests multiple times.","category":"page"},{"location":"developers/contributing/#Step-6b:-test-your-documentation-changes","page":"Contributing","title":"Step 6b: test your documentation changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Open Julia, then run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"julia> cd(joinpath(DEPOT_PATH[1], \"dev\", \"NumerovShooting\", \"docs\"))\n\njulia> using Pkg\n\njulia> Pkg.activate(\".\")\n  Activating new project at `~/.julia/dev/NumerovShooting/docs`\n\njulia> include(\"src/make.jl\")","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"After a while, a folder PKGROOT/docs/build will appear. Open PKGROOT/docs/build/index.html with your favorite browser, and have fun!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nBuilding the documentation might take a long time.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf there's a problem with the tests that you don't know how to fix, don't worry. Continue to step 5, and one of the NumerovShooting contributors will comment on your pull request, telling you how to fix things.","category":"page"},{"location":"developers/contributing/#Step-7:-make-a-pull-request","page":"Contributing","title":"Step 7: make a pull request","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once you've made changes, you're ready to push the changes to GitHub. Run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"$ cd ~/.julia/dev/NumerovShooting\n\n$ git add .\n\n$ git commit -m \"A descriptive message of the changes\"\n\n$ git push -u GITHUB_ACCOUNT my_new_branch","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Then go to our pull request page and follow the instructions that pop up to open a pull request.","category":"page"},{"location":"developers/contributing/#Step-8:-respond-to-comments","page":"Contributing","title":"Step 8: respond to comments","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"At this point, remember to be patient and polite; you may get a lot of comments on your pull request! However, do not be afraid! A lot of comments means that people are willing to help you improve the code that you are contributing to NumerovShooting.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"To respond to the comments, go back to step 5, make any changes, test the changes in step 6, and then make a new commit in step 7. Your PR will automatically update.","category":"page"},{"location":"developers/contributing/#Step-9:-cleaning-up","page":"Contributing","title":"Step 9: cleaning up","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once the PR is merged, clean-up your Git repository, ready for the next contribution!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"$ cd ~/.julia/dev/NumerovShooting\n\n$ git checkout main\n\n$ git pull","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIf you have suggestions to improve this guide, please make a pull request! It's particularly helpful if you do this after your first pull request because you'll know all the parts that could be explained better.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Thanks for contributing to NumerovShooting!","category":"page"},{"location":"developers/design-principles/#Design-Principles","page":"Design Principles","title":"Design Principles","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Pages = [\"design-principles.md\"]\nDepth = 2","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"We adopt some SciML design guidelines here. Please read them before contributing!","category":"page"},{"location":"developers/design-principles/#Consistency-vs-adherence","page":"Design Principles","title":"Consistency vs adherence","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"According to PEP8:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important.However, know when to be inconsistent—sometimes style guide recommendations just aren't applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don’t hesitate to ask!","category":"page"},{"location":"developers/design-principles/#Community-contribution-guidelines","page":"Design Principles","title":"Community contribution guidelines","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"For a comprehensive set of community contribution guidelines, refer to ColPrac. A relevant point to highlight is that one PR should do one thing. In the context of style, this means that PRs which update the style of a package's code should not be mixed with fundamental code contributions. This separation makes it easier to ensure that large style improvement are isolated from substantive (and potentially breaking) code changes.","category":"page"},{"location":"developers/design-principles/#Open-source-contributions-are-allowed-to-start-small-and-grow-over-time","page":"Design Principles","title":"Open source contributions are allowed to start small and grow over time","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"If the standard for code contributions is that every PR needs to support every possible input type that anyone can think of, the barrier would be too high for newcomers. Instead, the principle is to be as correct as possible to begin with, and grow the generic support over time. All recommended functionality should be tested, any known generality issues should be documented in an issue (and with a @test_broken test when possible).","category":"page"},{"location":"developers/design-principles/#Generic-code-is-preferred-unless-code-is-known-to-be-specific","page":"Design Principles","title":"Generic code is preferred unless code is known to be specific","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"For example, the code:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"function f(A, B)\n    for i in 1:length(A)\n        A[i] = A[i] + B[i]\n    end\nend","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"would not be preferred for two reasons. One is that it assumes A uses one-based indexing, which would fail in cases like OffsetArrays.jl and FFTViews.jl. Another issue is that it requires indexing, while not all array types support indexing (for example, CuArrays.jl). A more generic compatible implementation of this function would be to use broadcast, for example:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"function f(A, B)\n    @. A = A + B\nend","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"which would allow support for a wider variety of array types.","category":"page"},{"location":"developers/design-principles/#Internal-types-should-match-the-types-used-by-users-when-possible","page":"Design Principles","title":"Internal types should match the types used by users when possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"If f(A) takes the input of some collections and computes an output from those collections, then it should be expected that if the user gives A as an Array, the computation should be done via Arrays. If A was a CuArray, then it should be expected that the computation should be internally done using a CuArray (or appropriately error if not supported). For these reasons, constructing arrays via generic methods, like similar(A), is preferred when writing f instead of using non-generic constructors like Array(undef,size(A)) unless the function is documented as being non-generic.","category":"page"},{"location":"developers/design-principles/#Trait-definition-and-adherence-to-generic-interface-is-preferred-when-possible","page":"Design Principles","title":"Trait definition and adherence to generic interface is preferred when possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Julia provides many interfaces, for example:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Iteration\nIndexing\nBroadcasting","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Those interfaces should be followed when possible. For example, when defining broadcast overloads, one should implement a BroadcastStyle as suggested by the documentation instead of simply attempting to bypass the broadcast system via copyto! overloads.","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"When interface functions are missing, these should be added to an interface package, like ArrayInterface.jl. Such traits should be declared and used when appropriate. For example, if a line of code requires mutation, the trait ArrayInterface.ismutable(A) should be checked before attempting to mutate, and informative error messages should be written to capture the immutable case (or, an alternative code which does not mutate should be given).","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"One example of this principle is demonstrated in the generation of Jacobian matrices. In many scientific applications, one may wish to generate a Jacobian cache from the user's input u0. A naive way to generate this Jacobian is J = similar(u0,length(u0),length(u0)). However, this will generate a Jacobian J such that J isa Matrix.","category":"page"},{"location":"developers/design-principles/#Macros-should-be-limited-and-only-be-used-for-syntactic-sugar","page":"Design Principles","title":"Macros should be limited and only be used for syntactic sugar","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Macros define new syntax, and for this reason they tend to be less composable than other coding styles and require prior familiarity to be easily understood. One principle to keep in mind is, \"can the person reading the code easily picture what code is being generated?\". For example, a user of Soss.jl may not know what code is being generated by:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"@model (x, α) begin\n    σ ~ Exponential()\n    β ~ Normal()\n    y ~ For(x) do xj\n        Normal(α + β * xj, σ)\n    end\n    return y\nend","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"and thus using such a macro as the interface is not preferred when possible. However, a macro like @muladd is trivial to picture on a code (it recursively transforms a*b + c to muladd(a,b,c) for more accuracy and efficiency), so using such a macro for example:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"julia> @macroexpand(@muladd k3 = f(t + c3 * dt, @. uprev + dt * (a031 * k1 + a032 * k2)))\n:(k3 = f((muladd)(c3, dt, t), (muladd).(dt, (muladd).(a032, k2, (*).(a031, k1)), uprev)))","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"is recommended. Some macros in this category are:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"@inbounds\n@muladd\n@view\n@named\n@.\n@..","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Some performance macros, like @simd, @threads, or @turbo from LoopVectorization.jl, make an exception in that their generated code may be foreign to many users. However, they still are classified as appropriate uses as they are syntactic sugar since they do (or should) not change the behavior of the program in measurable ways other than performance.","category":"page"},{"location":"developers/design-principles/#Errors-should-be-caught-as-early-as-possible,-and-error-messages-should-be-made-contextually-clear-for-newcomers","page":"Design Principles","title":"Errors should be caught as early as possible, and error messages should be made contextually clear for newcomers","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Whenever possible, defensive programming should be used to check for potential errors before they are encountered deeper within a package. For example, if one knows that f(u0,p) will error unless u0 is the size of p, this should be caught at the start of the function to throw a domain specific error, for example \"parameters and initial condition should be the same size\".","category":"page"},{"location":"developers/design-principles/#Subpackaging-and-interface-packages-is-preferred-over-conditional-modules-via-Requires.jl","page":"Design Principles","title":"Subpackaging and interface packages is preferred over conditional modules via Requires.jl","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Requires.jl should be avoided at all costs. If an interface package exists, such as ChainRulesCore.jl for defining automatic differentiation rules without requiring a dependency on the whole ChainRules.jl system, or RecipesBase.jl which allows for defining Plots.jl plot recipes without a dependency on Plots.jl, a direct dependency on these interface packages is preferred.","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Otherwise, instead of resorting to a conditional dependency using Requires.jl, it is preferred one creates subpackages, i.e. smaller independent packages kept within the same GitHub repository with independent versioning and package management. An example of this is seen in Optimization.jl which has subpackages like OptimizationBBO.jl for BlackBoxOptim.jl support.","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Some important interface packages to be aware of include:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"ChainRulesCore.jl\nRecipesBase.jl\nArrayInterface.jl\nCommonSolve.jl\nSciMLBase.jl","category":"page"},{"location":"developers/design-principles/#Functions-should-either-attempt-to-be-non-allocating-and-reuse-caches,-or-treat-inputs-as-immutable","page":"Design Principles","title":"Functions should either attempt to be non-allocating and reuse caches, or treat inputs as immutable","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Mutating codes and non-mutating codes fall into different worlds. When a code is fully immutable, the compiler can better reason about dependencies, optimize the code, and check for correctness. However, many times a code making the fullest use of mutation can outperform even what the best compilers of today can generate. That said, the worst of all worlds is when code mixes mutation with non-mutating code. Not only is this a mishmash of coding styles, it has the potential non-locality and compiler proof issues of mutating code while not fully benefiting from the mutation.","category":"page"},{"location":"developers/design-principles/#Out-of-place-and-immutability-is-preferred-when-sufficient-performant","page":"Design Principles","title":"Out-of-place and immutability is preferred when sufficient performant","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Mutation is used to get more performance by decreasing the amount of heap allocations. However, if it's not helpful for heap allocations in a given spot, do not use mutation. Mutation is scary and should be avoided unless it gives an immediate benefit. For example, if matrices are sufficiently large, then A*B is as fast as mul!(C,A,B), and thus writing A*B is preferred (unless the rest of the function is being careful about being fully non-allocating, in which case this should be mul! for consistency).","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Similarly, when defining types, using struct is preferred to mutable struct unless mutating the struct is a common occurrence. Even if mutating the struct is a common occurrence, see whether using Setfield.jl is sufficient. The compiler will optimize the construction of immutable structs, and thus this can be more efficient if it's not too much of a code hassle.","category":"page"},{"location":"developers/design-principles/#Tests-should-attempt-to-cover-a-wide-gamut-of-input-types","page":"Design Principles","title":"Tests should attempt to cover a wide gamut of input types","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Code coverage numbers are meaningless if one does not consider the input types. For example, one can hit all the code with Array, but that does not test whether CuArray is compatible! Thus, it's always good to think of coverage not in terms of lines of code but in terms of type coverage. A good list of number types to think about are:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Float64\nFloat32\nComplex\nDual\nBigFloat","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Array types to think about testing are:","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Array\nOffsetArray\nCuArray","category":"page"},{"location":"developers/design-principles/#When-in-doubt,-a-submodule-should-become-a-subpackage-or-separate-package","page":"Design Principles","title":"When in doubt, a submodule should become a subpackage or separate package","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Each package should focus on one core idea. If there's something separate enough to be a submodule, could it instead be a separate well-tested and documented package to be used by other packages? Most likely yes.","category":"page"},{"location":"developers/design-principles/#Globals-should-be-avoided-whenever-possible","page":"Design Principles","title":"Globals should be avoided whenever possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Global variables should be avoided whenever possible. When required, global variables should be constants and have an all uppercase name separated with underscores (e.g. MY_CONSTANT). They should be defined at the top of the file, immediately after imports and exports but before an __init__ function. If you truly want mutable global style behavior you may want to look into mutable containers.","category":"page"},{"location":"developers/design-principles/#Type-stable-and-type-grounded-code-is-preferred-wherever-possible","page":"Design Principles","title":"Type-stable and type-grounded code is preferred wherever possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Type-stable and type-grounded code helps the compiler create not only more optimized code, but also faster to compile code. Always keep containers well-typed, functions specializing on the appropriate arguments, and types concrete.","category":"page"},{"location":"developers/design-principles/#Closures-should-be-avoided-whenever-possible","page":"Design Principles","title":"Closures should be avoided whenever possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Closures can cause accidental type instabilities that are difficult to track down and debug; in the long run it saves time to always program defensively and avoid writing closures in the first place, even when a particular closure would not have been problematic. A similar argument applies to reading code with closures; if someone is looking for type instabilities, this is faster to do when code does not contain closures. See examples here.","category":"page"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Furthermore, if you want to update variables in an outer scope, do so explicitly with Refs or self defined structs.","category":"page"},{"location":"developers/design-principles/#Numerical-functionality-should-use-the-appropriate-generic-numerical-interfaces","page":"Design Principles","title":"Numerical functionality should use the appropriate generic numerical interfaces","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"While you can use A\\b to do a linear solve inside a package, that does not mean that you should. This interface is only sufficient for performing factorizations, and so that limits the scaling choices, the types of A that can be supported, etc. Instead, linear solves within packages should use LinearSolve.jl. Similarly, nonlinear solves should use NonlinearSolve.jl. Optimization should use Optimization.jl. Etc. This allows the full generic choice to be given to the user without depending on every solver package (effectively recreating the generic interfaces within each package).","category":"page"},{"location":"developers/design-principles/#Functions-should-capture-one-underlying-principle","page":"Design Principles","title":"Functions should capture one underlying principle","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Functions mean one thing. Every dispatch of + should be \"the meaning of addition on these types\". While in theory you could add dispatches to + that mean something different, that will fail in generic code for which + means addition. Thus, for generic code to work, code needs to adhere to one meaning for each function. Every dispatch should be an instantiation of that meaning.","category":"page"},{"location":"developers/design-principles/#Internal-choices-should-be-exposed-as-options-whenever-possible","page":"Design Principles","title":"Internal choices should be exposed as options whenever possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"Whenever possible, numerical values and choices within scripts should be exposed as options to the user. This promotes code reusability beyond the few cases the author may have expected.","category":"page"},{"location":"developers/design-principles/#Prefer-code-reuse-over-rewrites-whenever-possible","page":"Design Principles","title":"Prefer code reuse over rewrites whenever possible","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"If a package has a function you need, use the package. Add a dependency if you need to. If the function is missing a feature, prefer to add that feature to said package and then add it as a dependency. If the dependency is potentially troublesome, for example because it has a high load time, prefer to spend time helping said package fix these issues and add the dependency. Only when it does not seem possible to make the package \"good enough\" should using the package be abandoned. If it is abandoned, consider building a new package for this functionality as you need it, and then make it a dependency.","category":"page"},{"location":"developers/design-principles/#Prefer-to-not-shadow-functions","page":"Design Principles","title":"Prefer to not shadow functions","text":"","category":"section"},{"location":"developers/design-principles/","page":"Design Principles","title":"Design Principles","text":"In Julia, two functions can share the same name if they belong to different namespaces. For example, X.f and Y.f can be two different functions, with different dispatches, but the same name. This should be avoided whenever possible. Instead of creating MyPackage.sort, consider adding dispatches to Base.sort for your types if these new dispatches match the underlying principle of the function. If they don't, it would be preferable to use a different name. While using MyPackage.sort is not conflicting, it is going to be confusing for most people unfamiliar with your code, so MyPackage.special_sort would be more helpful to newcomers reading the code.","category":"page"},{"location":"developers/style-guide/#Style-Guide","page":"Style Guide","title":"Style Guide","text":"","category":"section"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"This section describes the coding style rules that apply to our code and that we recommend you to use it also.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"In some cases, our style guide diverges from Julia's official Style Guide (Please read it!). All such cases will be explicitly noted and justified.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"Our style guide adopts many recommendations from the BlueStyle. Please read the BlueStyle before contributing to this package. If these guidelines are not followed, your pull requests may not be accepted.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"info: Info\nThe style guide is always a work in progress, and not all NumerovShooting code follows the rules. When modifying NumerovShooting, please fix the style violations of the surrounding code (i.e., leave the code tidier than when you started). If large changes are needed, consider separating them into another pull request.","category":"page"},{"location":"developers/style-guide/#Formatting","page":"Style Guide","title":"Formatting","text":"","category":"section"},{"location":"developers/style-guide/#Run-JuliaFormatter","page":"Style Guide","title":"Run JuliaFormatter","text":"","category":"section"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"NumerovShooting uses JuliaFormatter as an auto-formatting tool.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"We use the options contained in .JuliaFormatter.toml.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"To format your code, cd to the NumerovShooting directory, then run:","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"julia> using Pkg\n\njulia> Pkg.add(\"JuliaFormatter\")\n\njulia> using JuliaFormatter: format\n\njulia> format(\"docs\"); format(\"src\"); format(\"test\")","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"info: Info\nA continuous integration check verifies that all PRs made to NumerovShooting have passed the formatter.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"The following sections outline extra style guide points that are not fixed automatically by JuliaFormatter.","category":"page"},{"location":"developers/style-guide/#Use-the-Julia-extension-for-Visual-Studio-Code","page":"Style Guide","title":"Use the Julia extension for Visual Studio Code","text":"","category":"section"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"Please use Visual Studio Code with the Julia extension to edit, format, and test your code. For the time being, we do not recommend using editors other than Visual Studio Code to edit your code.","category":"page"},{"location":"developers/style-guide/","page":"Style Guide","title":"Style Guide","text":"This extension already has JuliaFormatter integrated. So to format your code, follow the steps listed here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = NumerovShooting","category":"page"},{"location":"#NumerovShooting","page":"Home","title":"NumerovShooting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NumerovShooting.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The code, which is hosted on GitHub, is tested using various continuous integration services for its validity.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This repository is created and maintained by @singularitti, and contributions are highly welcome.","category":"page"},{"location":"#Package-features","page":"Home","title":"Package features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This repo stores a Julia implementation of Paolo Giannozzi's course Numerical Methods in Quantum Mechanics of year 2018-2019. But only for the Numerov's method in the first chapter.","category":"page"},{"location":"#Course-Description","page":"Home","title":"Course Description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The lecture notes is here.","category":"page"},{"location":"#Goals","page":"Home","title":"Goals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"this course provides an introduction to numerical methods and techniques useful for the numerical solution of quantum mechanical problems, especially in atomic and condensed-matter physics. The course is organized as a series of theoretical lessons in which the physical problems and the numerical concepts needed for their resolution are presented, followed by practical sessions in which examples of implementatation for specific simple problems are presented. The student will learn to use the concepts and to practise scientific programming by modifying and extending the examples presented during the course.","category":"page"},{"location":"#Syllabus","page":"Home","title":"Syllabus","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Schroedinger equations in one dimension: techniques for numerical solutions. Solution of the Schroedinger equations for a potential with spherical symmetry. Scattering from a potential. Variational method: expansion on a basis of functions, secular problem, eigenvalues and eigenvectors. Examples: gaussian basis, plane-wave basis. Many-electron systems: Hartree and Hartree-Fock equations: self-consistent field, exchange interaction. Numerical solution of Hartree-Fock equations in atoms with radial integration and on a gaussian basis set. Introduction to numerical solution of electronic states in molecules. Electronic states in solids: solution of the Schroedinger equation for periodic potentials. Introduction to exact diagonalization of spin systems. Introduction to Density-Functional Theory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"No. My code Subject\n1.  One-dimensional Schroedinger equation:  general features of the discrete spectrum, relationship between energy, parity, number of intersections of a solution. Harmonic oscillator: analytical solution. Discretization, Numerov algorithm, numerical stability, eigenvalue search using stable outwards and inwards integrations. (Notes: Ch.1)\n2.  Numerical solution of the one-dimensional Schroedinger equation:  examples for the harmonic oscillator (code harmonic0: Fortran, C; code harmonic1: Fortran, C).\n3.  Three-dimensional Schroedinger equation:  Central potentials, variable separation, logarithmic grids, perturbative estimate to accelerate eigenvalue convergence. (Notes: Ch.2). A glimpse on true three-dimensional problems on a grid. (Notes: appendix B)\n4.  Numerical solution for spherically symmetric potentials:  example for Hydrogen atom (code hydrogen_radial: Fortran, C; needed Fortran routines solve_sheq, init_pot, do_mesh)\n5.  Scattering from a potential: cross section, phase shifts, resonances. (Notes: Ch.3; Thijssen: Ch.2)\n6.  Calculation of cross sections: numerical solution for Lennard-Jones potential (code crossection: Fortran, C).\n7.  Variational method: Schroedinger equation as minimum problem, expansion on a basis of functions, secular problem, introduction to diagonalization algorithms. (Notes: Ch.4; Thijssen: Ch.3)\n8.  Variational method using an orthonormal basis set: example of a potential well in plane waves (code pwell: Fortran, C).\n9.  Non-orthonormal basis sets: gaussian functions. (Notes: Ch.5)\n10.  Variational method with gaussian basis set: solution for Hydrogen atom (code hydrogen_gauss: Fortran, C; needed Fortran routine diag).\n11.  Self-consistent field: solution of the many-body problem: Hartree method, self-consistent field. (Notes: Ch.6)\n12.  He atom with Hartree approximation: solution with radial integration and self-consistency (code heliumhfradial: Fortran, C).\n13.  Hartree-Fock method: Slater determinants, Hartree-Fock equations (Notes: Ch.7; Thijssen: Ch.4.1-4.5)\n14.  Helium atom with Hartree-Fock approximation: solution with gaussian basis and diagonalization (code heliumhfgauss: Fortran, C).\n15.  Molecules: Born-Oppenheimer approximation, potential energy surface, diatomic molecules. introduction to numerical solution for molecules. (Notes: Ch.8; Thijssen: Ch.4.6-4.8)\n16.  Molecules with gaussian basis: solution of Hartree-Fock equations on a gaussian basis for a H2 molecule (code h2hfgauss: Fortran, C).\n17.  Electronic states in crystals: Bloch theorem, band structure. (Notes: Ch.9; Thijssen: Ch.4.6-4.8)\n18.  Periodic potentials: numerical solution with plane waves of the Kronig-Penney model (code periodicwell: Fortran, C; needed Fortran routine cft).\n19.  Electronic states in crystals II: three-dimensional case, methods of solution, plane wave basis set, introduction to the concept of pseudopotential. (Notes: Ch.10; Thijssen: Ch.6.1-6.4, 6.7)\n20.  Pseudopotentials:  solution of the Cohen-Bergstresser model for Silicon (code cohenbergstresser: Fortran, C).\n21.  Spin systems Introduction to spin systems: Heisenberg model, exact diagonalization, iterative methods for diagonalization, sparseness. (Notes: Ch.11)\n22.  Exact Diagonalization Solution of the Heisenberg model with Lanczos chains (code heisenberg_exact: Fortran, C).\n23.  Density-Functional Theory Introduction to the theory and to the plane-wave pseudopotential method (Notes: Ch.12)\n24.  Density-Functional Theory II Fast Fourier-Trasform and iterative techniques (dumb and less dumb code, only Fortran, solving Si with Appelbaum-Hamann pseudopotentials).  Assignment of exam problems.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg mode and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add NumerovShooting","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or, equivalently, via Pkg.jl:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg; Pkg.add(\"NumerovShooting\")","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"STABLE — documentation of the most recently tagged version.\nDEV — documentation of the in-development version.","category":"page"},{"location":"#Project-status","page":"Home","title":"Project status","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is developed for and tested against Julia v1.6 and above on Linux, macOS, and Windows.","category":"page"},{"location":"#Questions-and-contributions","page":"Home","title":"Questions and contributions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can post usage questions on our discussion page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We welcome contributions, feature requests, and suggestions. If you encounter any problems, please open an issue. The Contributing page has a few guidelines that should be followed when opening pull requests and contributing code.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/installation.md\",\n    \"man/definitions.md\",\n    \"man/troubleshooting.md\",\n    \"developers/contributing.md\",\n    \"developers/style-guide.md\",\n    \"developers/design-principles.md\",\n]\nDepth = 3","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"},{"location":"#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\"]","category":"page"},{"location":"man/installation/#Installation-Guide","page":"Installation Guide","title":"Installation Guide","text":"","category":"section"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Pages = [\"installation.md\"]\nDepth = 2","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Here are the installation instructions for package NumerovShooting. If you have trouble installing it, please refer to our Troubleshooting page for more information.","category":"page"},{"location":"man/installation/#Install-Julia","page":"Installation Guide","title":"Install Julia","text":"","category":"section"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"First, you should install Julia. We recommend downloading it from its official website. The recommended way is to use a version manager Juliaup.","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Install the latest Julia version by running this in your terminal:","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"curl -fsSL https://install.julialang.org | sh","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"on Unix-type systems. For Windows users, run","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"winget install julia -s msstore","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Once installed, julia will be available via the command line interface. This will install the Juliaup installation manager, which will automatically install Julia and help keep it up to date. The command juliaup is also installed. To install different Julia versions see juliaup --help. There is a short video introduction to Juliaup made by its authors.","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Please follow the detailed instructions on its website if you have to build Julia from source. Some computing centers may have Julia preinstalled. Please contact your administrator for more information in that case. Additional information can be found here: how to set up Julia on HPC systems.","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"If you have Homebrew installed, open Terminal.app and type","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"brew install julia","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"to install it as a formula.","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"If you are also using macOS and want to install it as a prebuilt binary app, type","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"brew install --cask julia","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"instead.","category":"page"},{"location":"man/installation/#Which-version-should-I-pick?","page":"Installation Guide","title":"Which version should I pick?","text":"","category":"section"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"You can install the current stable release or the long-term support (LTS) release.","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"The current stable release is the latest release of Julia. It has access to newer features, and is likely faster.\nThe long-term support release is an older version of Julia that has continued to receive bug and security fixes. However, it may not have the latest features or performance improvements.","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Most users should install the 'Current stable release' and update their Julia version whenever a new version is released. Note that any code you write on one version of the current stable release will continue to work on all subsequent releases.","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Users in restricted software environments, where enterprise IT controls software installations, may benefit from installing the long-term support release to reduce the frequency of updates.","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Versions above v1.3, especially the latest stable ones, are strongly recommended. This package is highly unlikely to work on v1.0 and earlier versions. Since the Julia team has set v1.6 as the LTS release, we will gradually drop support for versions below v1.6.","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Julia and Julia packages support multiple operating systems and CPU architectures; check this table to see if it can be installed on your machine. For Mac computers with M-series processors, this package and its dependencies may not work. Please install the Intel-compatible version of Julia (for macOS x86-64) if any platform-related error occurs.","category":"page"},{"location":"man/installation/#Install-the-package","page":"Installation Guide","title":"Install the package","text":"","category":"section"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"The following installation steps are demonstrated using macOS as the standard platform:","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Open the Terminal app, and type julia to start an interactive session (known as the REPL).\nRun the following commands and wait for them to finish:\njulia> using Pkg\n\njulia> Pkg.update()\n\njulia> Pkg.add(\"NumerovShooting\")\nRun\njulia> using NumerovShooting\nand have fun!\nPlease keep the Julia session active while using it. Restarting the session may take some time.","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"If you want to install the latest in-development (probably buggy) version of NumerovShooting, type","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"using Pkg\nPkg.update()\npkg\"add https://github.com/singularitti/NumerovShooting.jl\"","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"in the second step above.","category":"page"},{"location":"man/installation/#Update-the-package","page":"Installation Guide","title":"Update the package","text":"","category":"section"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Please watch our GitHub repository for new releases. Once we release a new version, you can update NumerovShooting by typing","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"using Pkg\nPkg.update(\"NumerovShooting\")\nPkg.gc()","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"in the Julia REPL.","category":"page"},{"location":"man/installation/#Uninstall-and-then-reinstall-the-package","page":"Installation Guide","title":"Uninstall and then reinstall the package","text":"","category":"section"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"Errors may occur if the package is improperly installed. In this case, you may want to uninstall and reinstall the package. Here is how to do that:","category":"page"},{"location":"man/installation/","page":"Installation Guide","title":"Installation Guide","text":"To uninstall, in a Julia session, run\njulia> using Pkg\n\njulia> Pkg.rm(\"NumerovShooting\")\n\njulia> Pkg.gc()\nPress Ctrl+D to quit the current session. Start a new Julia session and reinstall NumerovShooting.","category":"page"},{"location":"man/troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Pages = [\"troubleshooting.md\"]\nDepth = 2","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"This page lists possible errors you may encounter and provides tips on how to fix them. If you have any questions about how to use this code, feel free to discuss with us.","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you have additional tips, please either report an issue or submit a pull request with suggestions.","category":"page"},{"location":"man/troubleshooting/#Cannot-find-the-Julia-executable","page":"Troubleshooting","title":"Cannot find the Julia executable","text":"","category":"section"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Ensure that Julia is installed in your environment. Please download the latest stable version for your platform, and it's recommended to do it indirectly with Juliaup as explained on that page.","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you prefer not to install Juliaup, download the corresponding binaries instead. Next, create a symbolic link to the Julia executable. If the path is not included in your $PATH environment variable, add it by exporting the path to $PATH.","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Some clusters, like Comet, or Expanse, already have Julia installed as a module, you can just module load julia to use it. If not, you should either install it yourself or contact your system administrator.","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"See Installation Guide for more information.","category":"page"},{"location":"man/troubleshooting/#Julia-starts-slow","page":"Troubleshooting","title":"Julia starts slow","text":"","category":"section"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"First, we recommend downloading the latest version of Julia using Juliaup. Usually, the latest version has the best performance.","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"For simple, one-time tasks in Julia, you can start the Julia REPL with","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --compile=min","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"to minimize compilation or","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --optimize=0","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"to minimize optimizations. Or you could make a system image and run with","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --sysimage custom-image.so","category":"page"},{"location":"man/troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"See Fredrik Ekre's talk for details.","category":"page"}]
}
